-- complain if script is sourced in psql, rather than via CREATE EXTENSION
\echo Use "CREATE EXTENSION similarity" to load this file. \quit


CREATE FUNCTION lev_v1 (text, text) RETURNS float8
AS 'MODULE_PATHNAME','lev_v1'
LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;

CREATE FUNCTION lev_v2 (text, text) RETURNS int
AS 'MODULE_PATHNAME','lev_v2'
LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;

CREATE FUNCTION lev_v3 (text, text) RETURNS int
AS 'MODULE_PATHNAME','lev_v3'
LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;

CREATE FUNCTION lev_v4 (text, text, int) RETURNS int
AS 'MODULE_PATHNAME','lev_v4'
LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;

CREATE FUNCTION lev_v5 (text, text, int) RETURNS bool
AS 'MODULE_PATHNAME','lev_v5'
LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;

CREATE FUNCTION jaccard_index (text, text) RETURNS float4
AS 'MODULE_PATHNAME','jac2'
LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;

CREATE FUNCTION jac (text, text) RETURNS float4
AS 'MODULE_PATHNAME','jac'
LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;

CREATE FUNCTION jac1 (text, text) RETURNS float4
AS 'MODULE_PATHNAME','jac1'
LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;

CREATE FUNCTION jac2 (text, text) RETURNS float4
AS 'MODULE_PATHNAME','jac2'
LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;


-- CREATE FUNCTION levenshtein_distance (text, text) RETURNS int
-- AS 'MODULE_PATHNAME','lev_v3'
-- LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;

-- CREATE FUNCTION levenshtein_distance_less (text, text, int) RETURNS int
-- AS 'MODULE_PATHNAME','lev_v4'
-- LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;

CREATE TYPE lev_t AS (x text, y text);

CREATE FUNCTION levenshtein_distance (text, text) RETURNS lev_t
AS 'MODULE_PATHNAME','lev_t_in'
LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;
-- AS $$ SELECT ROW($1, $2)::lev_t $$
-- LANGUAGE SQL IMMUTABLE STRICT PARALLEL SAFE;

CREATE FUNCTION lev_ast (lev_t, int) RETURNS bool
AS 'MODULE_PATHNAME','lev_t_less'
LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;
-- AS $$ SELECT lev_v5($1.a, $1.b, $2) $$
-- LANGUAGE SQL IMMUTABLE STRICT PARALLEL SAFE;

CREATE OPERATOR < (
    LEFTARG    = lev_t,
    RIGHTARG   = int,
    NEGATOR    = >=,
    COMMUTATOR = >,
    PROCEDURE  = lev_ast
);
